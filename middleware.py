import asyncio
import time
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

class AntiSpamMiddleware(BaseMiddleware):
    def __init__(self, min_interval: float = 1.0, max_violations: int = 3, ban_time: int = 10):
        self.min_interval = min_interval       # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
        self.max_violations = max_violations   # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ "—Å–ø–∞–º–∏—Ç—å" –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.ban_time = ban_time               # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        self._last_action_time = {}   # {user_id: timestamp}
        self._violations = {}         # {user_id: –∫–æ–ª-–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π}
        self._banned_until = {}       # {user_id: timestamp –¥–æ –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω}

    async def __call__(self, handler, event, data):
        user_id = None

        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id

        if user_id is None:
            return await handler(event, data)

        now = time.monotonic()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        banned_until = self._banned_until.get(user_id, 0)
        if now < banned_until:
            remaining = int(banned_until - now)
            if isinstance(event, CallbackQuery):
                await event.answer(f"üö´ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å.", show_alert=False)
            elif isinstance(event, Message):
                await event.answer(f"üö´ –¢—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø–∏—à–µ—à—å! –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫—É–Ω–¥.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É
        last_time = self._last_action_time.get(user_id, 0)
        if now - last_time < self.min_interval:
            # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            self._violations[user_id] = self._violations.get(user_id, 0) + 1

            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π ‚Äî –±–∞–Ω–∏–º
            if self._violations[user_id] >= self.max_violations:
                self._banned_until[user_id] = now + self.ban_time
                self._violations[user_id] = 0
                if isinstance(event, CallbackQuery):
                    await event.answer(f"‚õî –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {self.ban_time} —Å–µ–∫—É–Ω–¥.", show_alert=True)
                elif isinstance(event, Message):
                    await event.answer(f"‚õî –¢—ã —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–µ–Ω! –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.ban_time} —Å–µ–∫—É–Ω–¥.")
                return

            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if isinstance(event, CallbackQuery):
                await event.answer("‚è≥ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!", show_alert=False)
            elif isinstance(event, Message):
                await event.answer("‚è≥ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!")
            return

        # –í—Å—ë –æ–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–±–Ω—É–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
        self._last_action_time[user_id] = now
        self._violations[user_id] = 0

        return await handler(event, data)
