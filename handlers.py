import re
import os
import logging
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from aiogram import types, F, Router
from aiogram.types import InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboard import draft_keyboard, main_menu_keyboard, payment_menu_keyboard
from services import get_draft, create_or_update_draft, delete_draft
from services_payment import create_payment, check_payment_status

load_dotenv()
CHAT_ID = int(os.getenv("CHAT_ID"))

router = Router()


# === FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
class EditDraft(StatesGroup):
    photo = State()
    description = State()
    contact = State()


# === –ü–æ–∫–∞–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ ===
async def show_draft(user_id: int, target: types.Message, only_draft: bool = True):
    draft = await get_draft(user_id)
    if not draft:
        await target.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")
        return

    if only_draft and not draft.is_draft:
        await target.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.")
        return
    if not only_draft and draft.is_draft:
        await target.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    text = f"‚úçÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{draft.description or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n"
    text += f"üë§ *–ö–æ–Ω—Ç–∞–∫—Ç:* @{draft.contact or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n"

    # –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if draft.published_at and not draft.is_draft:
        expiry = draft.published_at + timedelta(days=30)
        remaining = expiry - datetime.now(timezone.utc)
        days, seconds = remaining.days, remaining.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        if remaining.total_seconds() > 0:
            text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω.\n"
        else:
            text += "‚è≥ –°—Ä–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫!\n"

    bot = target.bot
    if draft.photo:
        await bot.send_photo(chat_id=target.chat.id, photo=draft.photo, caption=text,
                             parse_mode="Markdown", reply_markup=draft_keyboard())
    else:
        await bot.send_message(chat_id=target.chat.id, text=text, parse_mode="Markdown",
                               reply_markup=draft_keyboard())


# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ===
async def update_post(user_id: int):
    draft = await get_draft(user_id)
    if not draft or draft.is_draft or not draft.message_id:
        return True

    full_text = f"{draft.description or '(–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è)'}"
    if draft.contact:
        full_text += f"\n\nüì© [–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π](https://t.me/{draft.contact})"

    from bot import bot
    try:
        if draft.photo:
            media = InputMediaPhoto(media=draft.photo, caption=full_text, parse_mode="Markdown")
            await bot.edit_message_media(chat_id=CHAT_ID, message_id=draft.message_id, media=media)
        else:
            await bot.edit_message_text(chat_id=CHAT_ID, message_id=draft.message_id,
                                        text=full_text, parse_mode="Markdown")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return False


# === –ö–æ–º–∞–Ω–¥—ã ===
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ **–≤–∞–∫–∞–Ω—Å–∏–π** –≤ —á–∞—Ç–µ [@IT_VacancyTGG](https://t.me/IT_VacancyTGG).\n\n"
        "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ **30 –¥–Ω–µ–π**\n"
        "‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è ‚Äî **–±–µ—Å–ø–ª–∞—Ç–Ω–æ!**\n\n"
        "üöÄ –ì–æ—Ç–æ–≤—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é? –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤ –º–µ–Ω—é!"
    )
    await message.answer(
        welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π) ===
@router.message(F.text == "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏")
async def msg_show_drafts(message: types.Message):
    await show_draft(message.from_user.id, message, only_draft=True)


@router.message(F.text == "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ")
async def msg_show_published(message: types.Message):
    draft = await get_draft(message.from_user.id)
    if draft and not draft.is_draft and draft.message_id:
        await show_draft(message.from_user.id, message, only_draft=False)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")


@router.message(F.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ")
async def msg_create_resume(message: types.Message):
    user_id = message.from_user.id
    draft = await get_draft(user_id)
    if not draft:
        await create_or_update_draft(user_id, is_draft=True)
        await message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω ‚úÖ", reply_markup=draft_keyboard())
    else:
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫.", reply_markup=main_menu_keyboard())


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def msg_help(message: types.Message):
    help_text = (
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!\n"
        "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: [@IT_VacancyTGG/35](https://t.me/IT_VacancyTGG/35)\n"
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!"
    )
    await message.answer(help_text, parse_mode="Markdown", disable_web_page_preview=True)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ===
@router.callback_query(F.data == "save_draft")
async def cb_save_draft(callback: types.CallbackQuery):
    draft = await get_draft(callback.from_user.id)
    bot = callback.message.bot

    if not draft:
        await create_or_update_draft(callback.from_user.id, is_draft=True)
        await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        return

    if not draft.is_draft and draft.message_id:
        try:
            await bot.delete_message(chat_id=CHAT_ID, message_id=draft.message_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: {e}")

        await create_or_update_draft(callback.from_user.id, is_draft=True, message_id=None)
        await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞.")
    else:
        await create_or_update_draft(callback.from_user.id, is_draft=True)
        await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
@router.callback_query(F.data == "edit_photo")
async def cb_edit_photo(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ë–µ–∑ —Ñ–æ—Ç–æ¬ª.")
    await state.set_state(EditDraft.photo)


@router.message(EditDraft.photo, F.photo)
async def set_photo(message: types.Message, state: FSMContext):
    await create_or_update_draft(message.from_user.id, photo=message.photo[-1].file_id)
    await message.answer("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu_keyboard())
    draft = await get_draft(message.from_user.id)
    await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
    await state.clear()


@router.message(EditDraft.photo, F.text)
async def set_no_photo(message: types.Message, state: FSMContext):
    if message.text.lower().strip() in ["–±–µ–∑ —Ñ–æ—Ç–æ", "skip", "no photo"]:
        await create_or_update_draft(message.from_user.id, photo=None)
        await message.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu_keyboard())
        draft = await get_draft(message.from_user.id)
        await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
        await state.clear()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ë–µ–∑ —Ñ–æ—Ç–æ¬ª.")


@router.callback_query(F.data == "edit_desc")
async def cb_edit_desc(callback: types.CallbackQuery, state: FSMContext):
    draft = await get_draft(callback.from_user.id)
    await callback.message.answer(f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{draft.description or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ:")
    await state.set_state(EditDraft.description)


@router.message(EditDraft.description, F.text)
async def set_description(message: types.Message, state: FSMContext):
    await create_or_update_draft(message.from_user.id, description=message.text)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu_keyboard())
    draft = await get_draft(message.from_user.id)
    await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
    await state.clear()


@router.callback_query(F.data == "edit_contact")
async def cb_edit_contact(callback: types.CallbackQuery, state: FSMContext):
    draft = await get_draft(callback.from_user.id)
    await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: @{draft.contact or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π username:")
    await state.set_state(EditDraft.contact)


@router.message(EditDraft.contact, F.text)
async def set_contact(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    if not re.match(r"^[a-zA-Z0-9_]{5,32}$", username):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await create_or_update_draft(message.from_user.id, contact=username)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", reply_markup=main_menu_keyboard())
    draft = await get_draft(message.from_user.id)
    await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
    await state.clear()


# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏ –æ–ø–ª–∞—Ç–∞ ===
@router.callback_query(F.data == "publish")
async def cb_publish(callback: types.CallbackQuery):
    draft = await get_draft(callback.from_user.id)
    if not draft:
        await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not draft.description or not draft.contact:
        await callback.message.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç!")
        return

    if not draft.paid:
        url, payment_id = await create_payment(150, "–û–ø–ª–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ", callback.from_user.id)
        await create_or_update_draft(callback.from_user.id, payment_id=payment_id)
        await callback.message.answer(
            f" –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å 150 —Ä—É–±.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ /check", 
            reply_markup=payment_menu_keyboard(url) 
        )
        return

    bot = callback.message.bot
    full_text = f"{draft.description}\n\nüì© [–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π](https://t.me/{draft.contact})"

    try:
        if not draft.is_draft and draft.message_id:
            success = await update_post(callback.from_user.id)
            if success:
                await callback.message.answer("‚úÖ –†–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
        else:
            if draft.photo:
                sent = await bot.send_photo(CHAT_ID, photo=draft.photo, caption=full_text, parse_mode="Markdown")
            else:
                sent = await bot.send_message(CHAT_ID, full_text, parse_mode="Markdown")

            await create_or_update_draft(callback.from_user.id, message_id=sent.message_id, is_draft=False, published_at=datetime.now(timezone.utc))
            await callback.message.answer("‚úÖ –†–µ–∑—é–º–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ'.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


@router.message(Command("check"))
async def cmd_check(message: types.Message):
    user_id = message.from_user.id
    draft = await get_draft(user_id)
    if not draft or not draft.payment_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.")
        return

    try:
        if check_payment_status(draft.payment_id):
            await create_or_update_draft(user_id, paid=True)
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ.")
        else:
            await message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# === –£–¥–∞–ª–µ–Ω–∏–µ ===
@router.callback_query(F.data == "delete")
async def cb_delete(callback: types.CallbackQuery):
    draft = await get_draft(callback.from_user.id)
    bot = callback.message.bot
    if draft and draft.message_id:
        try:
            await bot.delete_message(chat_id=CHAT_ID, message_id=draft.message_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await delete_draft(callback.from_user.id)
    await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω—ã ‚ùå", reply_markup=None)


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
def register_handlers(dp):
    dp.include_router(router)
