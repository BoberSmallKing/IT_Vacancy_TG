import re
import os
import logging
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from aiogram import types, F, Router
from aiogram.types import InputMediaPhoto, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy import select, func
from db import async_session, User, Rating, Draft
from keyboard import draft_keyboard, main_menu_keyboard, payment_menu_keyboard, rating_keyboard, confirm_delete_draft, confirm_in_draft, topic_keyboard
from services import get_draft, create_or_update_draft, delete_draft, register_user, refresh_id_key
from services_payment import create_payment, check_payment_status

load_dotenv()
CHAT_ID = int(os.getenv("CHAT_ID"))

router = Router()

theme_list = {
    "web": 12,
    "tg bots": 5,
    "ai": 159
}

# === FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
class EditDraft(StatesGroup):
    photo = State()
    description = State()
    contact = State()
    theme = State()

#========================================================
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ 
#========================================================
async def show_draft(user_id: int, target: types.Message, only_draft: bool = True):
    draft = await get_draft(user_id)
    if not draft:
        await target.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")
        return

    if only_draft and not draft.is_draft:
        await target.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.")
        return
    if not only_draft and draft.is_draft:
        await target.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥.")
        return

    text = "üì∞ *–¢–≤–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫*\n" + "‚îÄ" * 30 + "\n"
    if not draft.is_draft:
        if draft.message_id:
            text += f"üîó *–ì–ª–∞–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞*: https://t.me/SkillFlows/1/{draft.message_id}\n"
            if draft.theme_message_id:
                text += f"üîó *–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞*: https://t.me/SkillFlows/{theme_list[draft.theme_name]}/{draft.theme_message_id}\n\n"
    text += f"‚úçÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{draft.description or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n"
    text += f"üë§ *–ö–æ–Ω—Ç–∞–∫—Ç:* @{draft.contact or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n"
    text += f"üìî *–¢–µ–º–∞:* {draft.theme_name or '(—Ç–µ–º—ã –Ω–µ—Ç)'}\n\n"
    


    published_at = draft.published_at
    if isinstance(published_at, str):
        try:
            published_at = datetime.fromisoformat(published_at)
        except Exception:
            published_at = None

    if published_at and not draft.is_draft:
        expiry = published_at + timedelta(days=30)
        remaining = expiry - datetime.now(timezone.utc)
        days, seconds = remaining.days, remaining.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        if remaining.total_seconds() > 0:
            text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω.\n"
        else:
            text += "‚è≥ –°—Ä–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫!\n"
            
    text += "‚îÄ" * 30

    bot = target.bot
    if draft.photo:
        await bot.send_photo(chat_id=target.chat.id, photo=draft.photo, caption=text,
                             parse_mode="Markdown", reply_markup=draft_keyboard())
    else:
        await bot.send_message(chat_id=target.chat.id, text=text, parse_mode="Markdown",
                               reply_markup=draft_keyboard())
        
        
async def update_post(user_id: int):
    from bot import bot

    draft = await get_draft(user_id)
    if not draft or draft.is_draft or not draft.message_id:
        return True

    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()

        avg_query = await session.execute(
            select(func.avg(Rating.score), func.count(Rating.id))
            .where(Rating.to_user_id == user.id)
        )
        avg_score, review_count = avg_query.first()

        avg_score = round(avg_score or 0, 1)
        review_count = review_count or 0

    rating_line = (
        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {avg_score} / ({review_count})\n\n"
        if review_count > 0 else "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
    )

    full_text = (
        f"{draft.description or '(–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è)'}\n\n"
        f"{rating_line}"
    )
    if draft.contact:
        full_text += f"üì© [–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π](https://t.me/{draft.contact})"


    if draft.theme_name and draft.theme_change_count == 2:
        if draft.theme_message_id:
             await bot.delete_message(chat_id=CHAT_ID, message_id=draft.theme_message_id)


        if draft.theme_name in theme_list:
            thread_id = theme_list[draft.theme_name]
            if draft.photo:
                sent_thread = await bot.send_photo(
                    chat_id=CHAT_ID,
                    photo=draft.photo,
                    caption=full_text,
                    parse_mode="Markdown",
                    message_thread_id=thread_id
                )
            else:
                sent_thread = await bot.send_message(
                    chat_id=CHAT_ID,
                    text=full_text,
                    parse_mode="Markdown",
                    message_thread_id=thread_id
                )

            await create_or_update_draft(
                telegram_id=user_id,
                theme_message_id=sent_thread.message_id,
                theme_change_count=3
            )
            
            full_text += f"\u200B"
            
    if draft.photo:
        media = InputMediaPhoto(media=draft.photo, caption=full_text, parse_mode="Markdown")
        await bot.edit_message_media(chat_id=CHAT_ID, message_id=draft.message_id, media=media)
        if draft.theme_message_id:
            await bot.edit_message_media(chat_id=CHAT_ID, message_id=draft.theme_message_id, media=media)
    else:
        await bot.edit_message_text(chat_id=CHAT_ID, message_id=draft.message_id, text=full_text, parse_mode="Markdown")
        if draft.theme_message_id:
            await bot.edit_message_text(chat_id=CHAT_ID, message_id=draft.theme_message_id, text=full_text, parse_mode="Markdown")


    return True

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("rate_"):
        id_key = args[1].replace("rate_", "")
        await start_rate_flow(message, id_key, state)
        return

    user = await register_user(message.from_user.id, message.from_user.username)
    await refresh_id_key(user)

    text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ <b>—Å–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ</b> –≤ Telegram-—á–∞—Ç–µ, "
        "–∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å <b>–æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥</b> –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ ‚úçÔ∏è –°–æ–∑–¥–∞–π —Ä–µ–∑—é–º–µ –ø—Ä—è–º–æ –≤ Telegram\n"
        "‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω—è–π —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üì¢ –ü—É–±–ª–∏–∫—É–π –≤ –æ–±—â–µ–º —á–∞—Ç–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ ‚≠êÔ∏è –ü–æ–ª—É—á–∞–π –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ üë§ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–π—Ç–∏–Ω–≥\n\n"
        f"üìé –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –∞–∫–ª–∞–¥–∫–µ –ø—Ä–æ—Ñ–∏–ª—å"
    )
    await message.answer(text, reply_markup=main_menu_keyboard(), parse_mode="HTML", disable_web_page_preview=True)


#==================================
#–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π) 
#==================================

@router.message(F.text == "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏")
async def msg_show_drafts(message: types.Message):
    await show_draft(message.from_user.id, message, only_draft=True)


@router.message(F.text == "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ")
async def msg_show_published(message: types.Message):
    draft = await get_draft(message.from_user.id)
    if draft and not draft.is_draft and draft.message_id:
        await show_draft(message.from_user.id, message, only_draft=False)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥.")


@router.message(F.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ")
async def msg_create_resume(message: types.Message):
    user_id = message.from_user.id
    draft = await get_draft(user_id)
    if not draft:
        await create_or_update_draft(user_id, is_draft=True)
        await message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω ‚úÖ", reply_markup=draft_keyboard())
    else:
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫.", reply_markup=main_menu_keyboard())


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def msg_help(message: types.Message):
    help_text = (
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!\n"
        "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: [@SkillFlows/35](https://t.me/SkillFlows/35)\n"
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!"
    )
    await message.answer(help_text, parse_mode="Markdown", disable_web_page_preview=True)
    
    
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        result = await session.execute(
            select(
                func.coalesce(func.avg(Rating.score), 0),
                func.count(Rating.id)
            ).where(Rating.to_user_id == user.id)
        )
        avg_rating, review_count = result.first()
        free_vacancy_line = "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è" if user.is_first_visit else "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" 
        
        text = (
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user.telegram_id}</code>\n"
            f"üí¨ –ò–º—è: {message.from_user.full_name}\n"
            f"üîó –ù–∏–∫: @{message.from_user.username or '‚Äî'}\n\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{round(avg_rating, 2)}</b>\n"
            f"üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: <b>{review_count}</b>\n\n"
            f"{free_vacancy_line}\n"
            f"üîë –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:\n"
            f"<code>https://t.me/ITvacancyCreate_bot?start=rate_{user.id_key}</code>"
        )

        await message.answer(text, parse_mode="HTML")
        

#===================================
# –ú–µ–Ω—é –≤–∞–∫–∞–Ω—Å–∏–∏(–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π) 
#===================================
@router.callback_query(F.data == "save_draft")
async def cb_save_draft(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –≤ —á–µ—Ä–Ω–æ–≤–∏–∫? –í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ–ø—è—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", reply_markup=confirm_in_draft())

        
@router.callback_query(F.data == "in_draft_confirm")
async def cb_save_draft_confirm(callback: types.CallbackQuery):
    draft = await get_draft(callback.from_user.id)
    bot = callback.message.bot

    if not draft:
        await create_or_update_draft(callback.from_user.id, is_draft=True)
        await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        return

    if not draft.is_draft and draft.message_id and draft.theme_name:
        await bot.delete_message(chat_id=CHAT_ID, message_id=draft.message_id)
        await bot.delete_message(chat_id=CHAT_ID, message_id=draft.theme_message_id)
        await create_or_update_draft(callback.from_user.id, is_draft=True, message_id=None, paid=False)
        await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞.")
    else:
        await create_or_update_draft(callback.from_user.id, is_draft=True, paid=False)
        await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        
        
@router.callback_query(F.data == "in_draft_cancel")
async def cb_save_draft_confirm(callback: types.CallbackQuery):
    await callback.message.answer("–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ ‚úÖ")
    await callback.answer()
        


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
@router.callback_query(F.data == "edit_photo")
async def cb_edit_photo(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ë–µ–∑ —Ñ–æ—Ç–æ¬ª.")
    await state.set_state(EditDraft.photo)


@router.message(EditDraft.photo, F.photo)
async def set_photo(message: types.Message, state: FSMContext):
    await create_or_update_draft(message.from_user.id, photo=message.photo[-1].file_id)
    await message.answer("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu_keyboard())
    draft = await get_draft(message.from_user.id)
    await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
    await state.clear()


@router.message(EditDraft.photo, F.text)
async def set_no_photo(message: types.Message, state: FSMContext):
    if message.text.lower().strip() in ["–±–µ–∑ —Ñ–æ—Ç–æ", "skip", "no photo"]:
        await create_or_update_draft(message.from_user.id, photo=None)
        await message.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu_keyboard())
        draft = await get_draft(message.from_user.id)
        await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
        await state.clear()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ë–µ–∑ —Ñ–æ—Ç–æ¬ª.")


@router.callback_query(F.data == "edit_desc")
async def cb_edit_desc(callback: types.CallbackQuery, state: FSMContext):
    draft = await get_draft(callback.from_user.id)
    await callback.message.answer(f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{draft.description or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ:")
    await state.set_state(EditDraft.description)


@router.message(EditDraft.description, F.text)
async def set_description(message: types.Message, state: FSMContext):
    await create_or_update_draft(message.from_user.id, description=message.text)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu_keyboard())
    draft = await get_draft(message.from_user.id)
    await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
    await state.clear()


@router.callback_query(F.data == "edit_contact")
async def cb_edit_contact(callback: types.CallbackQuery, state: FSMContext):
    draft = await get_draft(callback.from_user.id)
    await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: @{draft.contact or '(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π username:")
    await state.set_state(EditDraft.contact)


@router.message(EditDraft.contact, F.text)
async def set_contact(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    if not re.match(r"^[a-zA-Z0-9_]{5,32}$", username):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await create_or_update_draft(message.from_user.id, contact=username)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", reply_markup=main_menu_keyboard())
    draft = await get_draft(message.from_user.id)
    await show_draft(message.from_user.id, message, only_draft=draft.is_draft)
    await state.clear()
    
#=== –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ===    
@router.callback_query(F.data == "delete")
async def cb_delete_confirm(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n –û–Ω–∏ —É–¥–∞–ª—è—Ç—Å—è –∏ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–∑ –≤–µ—Ä–Ω—É—Ç—å!", reply_markup=confirm_delete_draft())
    await callback.answer()  

@router.callback_query(F.data == "delete_confirm")
async def cb_delete_execute(callback: types.CallbackQuery):
    draft = await get_draft(callback.from_user.id)
    bot = callback.message.bot
    await bot.delete_message(chat_id=CHAT_ID, message_id=draft.message_id)
    if draft.theme_message_id:
        await bot.delete_message(chat_id=CHAT_ID, message_id=draft.theme_message_id)
    await delete_draft(callback.from_user.id)
    await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω—ã ‚ùå")
    await callback.answer()


@router.callback_query(F.data == "delete_cancel")
async def cb_delete_cancel(callback: types.CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ")
    await callback.answer()
    
@router.callback_query(F.data == "choose_topic")
async def cb_set_topic(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ\n–±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –í–∞—à–∞ —É–ª—É–≥–∞. –¢–µ–º—É –º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 2 —Ä–∞–∑–∞", reply_markup=topic_keyboard())

@router.callback_query(F.data.in_(["topic_web", "topic_bots", "topic_ai"]))
async def cb_set_topic(callback: types.CallbackQuery):
    topics = {
        "topic_web": "web",
        "topic_bots": "tg bots",
        "topic_ai": "ai"
    }

    draft = await get_draft(callback.from_user.id)
    if not draft:
        await callback.message.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_theme = topics[callback.data]

    if not draft.theme_name:
        await create_or_update_draft(
            callback.from_user.id,
            theme_name=new_theme,
            theme_change_count=1
        )
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É {new_theme}‚úÖ")

    elif draft.theme_change_count == 1:
        await create_or_update_draft(
            callback.from_user.id,
            theme_name=new_theme,
            theme_change_count=2
        )
        await callback.message.answer(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–º—É –Ω–∞ {new_theme}‚úÖ")

    else:
        await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ç–µ–º—É –±–æ–ª—å—à–µ –¥–≤—É—Ö —Ä–∞–∑.")
        return  

    draft = await get_draft(callback.from_user.id) 
    await show_draft(callback.from_user.id, callback.message, only_draft=draft.is_draft)

        
@router.callback_query(F.data == "topic_cancel")
async def cb_set_topic(callback: types.CallbackQuery):
    await callback.message.answer("–¢–µ–º—ã –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚ùå")    

    

#====================
# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏ –æ–ø–ª–∞—Ç–∞ 
#====================

@router.callback_query(F.data == "publish")
async def cb_publish(callback: types.CallbackQuery):
    draft = await get_draft(callback.from_user.id)
    if not draft:
        await callback.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not draft.description or not draft.contact or not draft.theme_name:
        await callback.message.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Ç–µ–º—É!")
        return

    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not draft.paid and not user.is_first_visit:
            url, payment_id = await create_payment(1, "–û–ø–ª–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ", callback.from_user.id)
            await create_or_update_draft(callback.from_user.id, payment_id=payment_id)
            await callback.message.answer(
                "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ /check",
                reply_markup=payment_menu_keyboard(url)
            )
            return

        if user.is_first_visit:
            user.is_first_visit = False
            await session.commit()
            
        avg_query = await session.execute(
            select(func.avg(Rating.score), func.count(Rating.id))
            .where(Rating.to_user_id == user.id)
        )
        avg_score, review_count = avg_query.first()
        avg_score = round(avg_score or 0, 1)
        review_count = review_count or 0

    rating_line = (
        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {avg_score} / ({review_count})\n\n"
        if review_count > 0 else "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
    )

    full_text = (
        f"{draft.description}\n\n"
        f"{rating_line}"
        f"üì© [–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π](https://t.me/{draft.contact})"
    )

    bot = callback.message.bot

    if not draft.is_draft and draft.message_id:
        success = await update_post(callback.from_user.id)
        if success:
            await callback.message.answer("‚úÖ –†–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
    else:
        if draft.photo:
            sent_main = await bot.send_photo(
                CHAT_ID,
                photo=draft.photo,
                caption=full_text,
                parse_mode="Markdown"
            )
            if draft.theme_name:
                sent_thread = await bot.send_photo(
                    CHAT_ID,
                    photo=draft.photo,
                    caption=full_text,
                    parse_mode="Markdown",
                    message_thread_id=theme_list[draft.theme_name]
                )
        else:
            sent_main = await bot.send_message(
                CHAT_ID,
                full_text,
                parse_mode="Markdown"
            )
            if draft.theme_name:
                sent_thread = await bot.send_message(
                    CHAT_ID,
                    full_text,
                    parse_mode="Markdown",
                    message_thread_id=theme_list[draft.theme_name]
                )
        await create_or_update_draft(
            callback.from_user.id,
            message_id=sent_main.message_id,
            theme_message_id=sent_thread.message_id,
            is_draft=False,
            published_at=datetime.now(timezone.utc),
            theme_change_count=1
        )

        await callback.message.answer("‚úÖ –†–µ–∑—é–º–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ'.")




#=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ===
@router.message(Command("check"))
async def cmd_check(message: types.Message):
    user_id = message.from_user.id
    draft = await get_draft(user_id)
    if not draft or not draft.payment_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.")
        return

    try:
        if check_payment_status(draft.payment_id):
            await create_or_update_draft(user_id, paid=True)
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ.")
        else:
            await message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


#========    
# –†–µ–π—Ç–∏–Ω–≥ 
#========    
async def start_rate_flow(message: types.Message, id_key: str, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_key == id_key))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")
            return

    await message.answer(
        f"–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or '–±–µ–∑ –Ω–∏–∫–∞'}.\n"
        "–í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=rating_keyboard(user.id)
    )

@router.callback_query(F.data.regexp(r"^rate_(\d+)_(\d+)$"))
async def cb_handle_rating(callback: types.CallbackQuery):
    match = re.match(r"^rate_(\d+)_(\d+)$", callback.data)
    if not match:
        return

    target_user_id = int(match.group(1))
    score = int(match.group(2))

    async with async_session() as session:
        from_user = (await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )).scalar_one_or_none()

        if not from_user:
            from_user = User(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username or None,
            )
            session.add(from_user)
            await session.flush()  


        if target_user_id == from_user.id:
            await callback.message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ü–µ–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
                reply_markup=main_menu_keyboard()
            )
            return


        existing = (await session.execute(
            select(Rating).where(
                Rating.from_user_id == from_user.id,
                Rating.to_user_id == target_user_id
            )
        )).scalar_one_or_none()

        if existing:
            await callback.message.answer(
                "‚ö†Ô∏è –¢—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª –æ—Ç–∑—ã–≤ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                reply_markup=main_menu_keyboard()
            )
            return

        new_rating = Rating(
            from_user_id=from_user.id,
            to_user_id=target_user_id,
            score=score
        )
        session.add(new_rating)


        result = await session.execute(
            select(User, Draft)
            .join(Draft, Draft.user_id == User.id, isouter=True)
            .where(User.id == target_user_id, Draft.is_draft == False)
        )
        row = result.first()
        rated_user, draft = row if row else (None, None)

        if rated_user:
            rated_user.update_id_key()
            session.add(rated_user)

        await session.commit()  


        avg_score, review_count = (await session.execute(
            select(func.avg(Rating.score), func.count(Rating.id))
            .where(Rating.to_user_id == target_user_id)
        )).first()
        avg_score = round(avg_score or 0, 1)
        review_count = review_count or 0


        if draft and draft.message_id:
            bot = callback.bot
            rating_line = f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {avg_score}/({review_count})\n\n"
            full_text = (
                f"{draft.description}\n\n"
                f"{rating_line}"
                f"üì© [–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π](https://t.me/{draft.contact})"
            )

            try:
                if draft.photo:
                    await bot.edit_message_caption(
                        chat_id=int(os.getenv("CHAT_ID")),
                        message_id=draft.message_id,
                        caption=full_text,
                        parse_mode="Markdown"
                    )
                    if draft.theme_message_id:
                        await bot.edit_message_caption(
                        chat_id=int(os.getenv("CHAT_ID")),
                        message_id=draft.theme_message_id,
                        caption=full_text,
                        parse_mode="Markdown"
                    )
                else:
                    await bot.edit_message_text(
                        chat_id=int(os.getenv("CHAT_ID")),
                        message_id=draft.message_id,
                        text=full_text,
                        parse_mode="Markdown"
                    )
                    if draft.theme_message_id:
                        await bot.edit_message_text(
                        chat_id=int(os.getenv("CHAT_ID")),
                        message_id=draft.theme_message_id,
                        text=full_text,
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


    await callback.answer()
    await callback.message.answer(
        f"‚úÖ –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ {score}/5 —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚≠êÔ∏è",
        reply_markup=main_menu_keyboard()
    )

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
def register_handlers(dp):
    dp.include_router(router)